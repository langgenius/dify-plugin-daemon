// Code generated by controller generator. DO NOT EDIT.

package service

import (
	"github.com/gin-gonic/gin"
	"github.com/langgenius/dify-plugin-daemon/internal/core/plugin_daemon"
	"github.com/langgenius/dify-plugin-daemon/internal/core/plugin_daemon/access_types"
	"github.com/langgenius/dify-plugin-daemon/internal/core/session_manager"
	"github.com/langgenius/dify-plugin-daemon/internal/utils/stream"
	"github.com/langgenius/dify-plugin-daemon/pkg/entities/datasource_entities"
	"github.com/langgenius/dify-plugin-daemon/pkg/entities/plugin_entities"
	"github.com/langgenius/dify-plugin-daemon/pkg/entities/requests"
)

func DatasourceValidateCredentials(
	r *plugin_entities.InvokePluginRequest[requests.RequestValidateDatasourceCredentials],
	ctx *gin.Context,
	max_timeout_seconds int,
) {
	baseSSEWithSession(
		func(session *session_manager.Session) (*stream.Stream[datasource_entities.DataSourceValidateCredentialsResponse], error) {
			return plugin_daemon.DatasourceValidateCredentials(session, &r.Data)
		},
		access_types.PLUGIN_ACCESS_TYPE_DATASOURCE,
		access_types.PLUGIN_ACCESS_ACTION_VALIDATE_CREDENTIALS,
		r,
		ctx,
		max_timeout_seconds,
	)
}

func DatasourceGetWebsiteCrawl(
	r *plugin_entities.InvokePluginRequest[requests.RequestDatasourceGetWebsiteCrawl],
	ctx *gin.Context,
	max_timeout_seconds int,
) {
	baseSSEWithSession(
		func(session *session_manager.Session) (*stream.Stream[datasource_entities.WebsiteCrawlChunk], error) {
			return plugin_daemon.DatasourceGetWebsiteCrawl(session, &r.Data)
		},
		access_types.PLUGIN_ACCESS_TYPE_DATASOURCE,
		access_types.PLUGIN_ACCESS_ACTION_INVOKE_WEBSITE_DATASOURCE_GET_CRAWL,
		r,
		ctx,
		max_timeout_seconds,
	)
}

func DatasourceGetOnlineDocumentPages(
	r *plugin_entities.InvokePluginRequest[requests.RequestDatasourceGetOnlineDocumentPages],
	ctx *gin.Context,
	max_timeout_seconds int,
) {
	baseSSEWithSession(
		func(session *session_manager.Session) (*stream.Stream[datasource_entities.OnlineDocumentPageChunk], error) {
			return plugin_daemon.DatasourceGetOnlineDocumentPages(session, &r.Data)
		},
		access_types.PLUGIN_ACCESS_TYPE_DATASOURCE,
		access_types.PLUGIN_ACCESS_ACTION_INVOKE_ONLINE_DOCUMENT_DATASOURCE_GET_PAGES,
		r,
		ctx,
		max_timeout_seconds,
	)
}

func DatasourceGetOnlineDocumentPageContent(
	r *plugin_entities.InvokePluginRequest[requests.RequestInvokeOnlineDocumentDatasourceGetContent],
	ctx *gin.Context,
	max_timeout_seconds int,
) {
	baseSSEWithSession(
		func(session *session_manager.Session) (*stream.Stream[datasource_entities.DataSourceResponseChunk], error) {
			return plugin_daemon.DatasourceGetOnlineDocumentPageContent(session, &r.Data)
		},
		access_types.PLUGIN_ACCESS_TYPE_DATASOURCE,
		access_types.PLUGIN_ACCESS_ACTION_INVOKE_ONLINE_DOCUMENT_DATASOURCE_GET_PAGE_CONTENT,
		r,
		ctx,
		max_timeout_seconds,
	)
}

func DatasourceOnlineDriverBrowseFiles(
	r *plugin_entities.InvokePluginRequest[requests.RequestOnlineDriverBrowseFiles],
	ctx *gin.Context,
	max_timeout_seconds int,
) {
	baseSSEWithSession(
		func(session *session_manager.Session) (*stream.Stream[datasource_entities.GetOnlineDriverBrowseFilesResponse], error) {
			return plugin_daemon.DatasourceOnlineDriverBrowseFiles(session, &r.Data)
		},
		access_types.PLUGIN_ACCESS_TYPE_DATASOURCE,
		access_types.PLUGIN_ACCESS_ACTION_INVOKE_ONLINE_DRIVER_BROWSE_FILES,
		r,
		ctx,
		max_timeout_seconds,
	)
}

func DatasourceOnlineDriverDownloadFile(
	r *plugin_entities.InvokePluginRequest[requests.RequestOnlineDriverDownloadFile],
	ctx *gin.Context,
	max_timeout_seconds int,
) {
	baseSSEWithSession(
		func(session *session_manager.Session) (*stream.Stream[datasource_entities.DataSourceResponseChunk], error) {
			return plugin_daemon.DatasourceOnlineDriverDownloadFile(session, &r.Data)
		},
		access_types.PLUGIN_ACCESS_TYPE_DATASOURCE,
		access_types.PLUGIN_ACCESS_ACTION_INVOKE_ONLINE_DRIVER_DOWNLOAD_FILE,
		r,
		ctx,
		max_timeout_seconds,
	)
}
