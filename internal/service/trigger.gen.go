// Code generated by controller generator. DO NOT EDIT.

package service

import (
	"github.com/gin-gonic/gin"
	"github.com/langgenius/dify-plugin-daemon/internal/core/plugin_daemon"
	"github.com/langgenius/dify-plugin-daemon/internal/core/plugin_daemon/access_types"
	"github.com/langgenius/dify-plugin-daemon/internal/core/session_manager"
	"github.com/langgenius/dify-plugin-daemon/internal/utils/stream"
	"github.com/langgenius/dify-plugin-daemon/pkg/entities/plugin_entities"
	"github.com/langgenius/dify-plugin-daemon/pkg/entities/requests"
)

func TriggerInvoke(
	r *plugin_entities.InvokePluginRequest[requests.TriggerInvokeRequest],
	ctx *gin.Context,
	max_timeout_seconds int,
) {
	baseSSEWithSession(
		func(session *session_manager.Session) (*stream.Stream[requests.TriggerInvokeResponse], error) {
			return plugin_daemon.TriggerInvoke(session, &r.Data)
		},
		access_types.PLUGIN_ACCESS_TYPE_TRIGGER,
		access_types.PLUGIN_ACCESS_ACTION_INVOKE_TRIGGER,
		r,
		ctx,
		max_timeout_seconds,
	)
}

func TriggerValidateProviderCredentials(
	r *plugin_entities.InvokePluginRequest[requests.TriggerValidateProviderCredentialsRequest],
	ctx *gin.Context,
	max_timeout_seconds int,
) {
	baseSSEWithSession(
		func(session *session_manager.Session) (*stream.Stream[requests.TriggerValidateProviderCredentialsResponse], error) {
			return plugin_daemon.TriggerValidateProviderCredentials(session, &r.Data)
		},
		access_types.PLUGIN_ACCESS_TYPE_TRIGGER,
		access_types.PLUGIN_ACCESS_ACTION_VALIDATE_TRIGGER_CREDENTIALS,
		r,
		ctx,
		max_timeout_seconds,
	)
}

func TriggerDispatchEvent(
	r *plugin_entities.InvokePluginRequest[requests.TriggerDispatchEventRequest],
	ctx *gin.Context,
	max_timeout_seconds int,
) {
	baseSSEWithSession(
		func(session *session_manager.Session) (*stream.Stream[requests.TriggerDispatchEventResponse], error) {
			return plugin_daemon.TriggerDispatchEvent(session, &r.Data)
		},
		access_types.PLUGIN_ACCESS_TYPE_TRIGGER,
		access_types.PLUGIN_ACCESS_ACTION_DISPATCH_TRIGGER_EVENT,
		r,
		ctx,
		max_timeout_seconds,
	)
}

func TriggerSubscribe(
	r *plugin_entities.InvokePluginRequest[requests.TriggerSubscribeRequest],
	ctx *gin.Context,
	max_timeout_seconds int,
) {
	baseSSEWithSession(
		func(session *session_manager.Session) (*stream.Stream[requests.TriggerSubscribeResponse], error) {
			return plugin_daemon.TriggerSubscribe(session, &r.Data)
		},
		access_types.PLUGIN_ACCESS_TYPE_TRIGGER,
		access_types.PLUGIN_ACCESS_ACTION_SUBSCRIBE_TRIGGER,
		r,
		ctx,
		max_timeout_seconds,
	)
}

func TriggerUnsubscribe(
	r *plugin_entities.InvokePluginRequest[requests.TriggerUnsubscribeRequest],
	ctx *gin.Context,
	max_timeout_seconds int,
) {
	baseSSEWithSession(
		func(session *session_manager.Session) (*stream.Stream[requests.TriggerUnsubscribeResponse], error) {
			return plugin_daemon.TriggerUnsubscribe(session, &r.Data)
		},
		access_types.PLUGIN_ACCESS_TYPE_TRIGGER,
		access_types.PLUGIN_ACCESS_ACTION_UNSUBSCRIBE_TRIGGER,
		r,
		ctx,
		max_timeout_seconds,
	)
}

func TriggerRefresh(
	r *plugin_entities.InvokePluginRequest[requests.TriggerRefreshRequest],
	ctx *gin.Context,
	max_timeout_seconds int,
) {
	baseSSEWithSession(
		func(session *session_manager.Session) (*stream.Stream[requests.TriggerRefreshResponse], error) {
			return plugin_daemon.TriggerRefresh(session, &r.Data)
		},
		access_types.PLUGIN_ACCESS_TYPE_TRIGGER,
		access_types.PLUGIN_ACCESS_ACTION_REFRESH_TRIGGER,
		r,
		ctx,
		max_timeout_seconds,
	)
}
