// Code generated by controller generator. DO NOT EDIT.

package plugin_daemon

import (
	"github.com/langgenius/dify-plugin-daemon/internal/core/session_manager"
	"github.com/langgenius/dify-plugin-daemon/internal/utils/stream"
	"github.com/langgenius/dify-plugin-daemon/pkg/entities/datasource_entities"
	"github.com/langgenius/dify-plugin-daemon/pkg/entities/requests"
)

func DatasourceValidateCredentials(
	session *session_manager.Session,
	request *requests.RequestValidateDatasourceCredentials,
) (
	*stream.Stream[datasource_entities.DataSourceValidateCredentialsResponse], error,
) {
	return GenericInvokePlugin[requests.RequestValidateDatasourceCredentials, datasource_entities.DataSourceValidateCredentialsResponse](
		session,
		request,
		1,
	)
}

func DatasourceGetWebsiteCrawl(
	session *session_manager.Session,
	request *requests.RequestDatasourceGetWebsiteCrawl,
) (
	*stream.Stream[datasource_entities.WebsiteCrawlChunk], error,
) {
	return GenericInvokePlugin[requests.RequestDatasourceGetWebsiteCrawl, datasource_entities.WebsiteCrawlChunk](
		session,
		request,
		1,
	)
}

func DatasourceGetOnlineDocumentPages(
	session *session_manager.Session,
	request *requests.RequestDatasourceGetOnlineDocumentPages,
) (
	*stream.Stream[datasource_entities.OnlineDocumentPageChunk], error,
) {
	return GenericInvokePlugin[requests.RequestDatasourceGetOnlineDocumentPages, datasource_entities.OnlineDocumentPageChunk](
		session,
		request,
		1,
	)
}

func DatasourceGetOnlineDocumentPageContent(
	session *session_manager.Session,
	request *requests.RequestInvokeOnlineDocumentDatasourceGetContent,
) (
	*stream.Stream[datasource_entities.DataSourceResponseChunk], error,
) {
	return GenericInvokePlugin[requests.RequestInvokeOnlineDocumentDatasourceGetContent, datasource_entities.DataSourceResponseChunk](
		session,
		request,
		1,
	)
}

func DatasourceOnlineDriveBrowseFiles(
	session *session_manager.Session,
	request *requests.RequestOnlineDriveBrowseFiles,
) (
	*stream.Stream[datasource_entities.GetOnlineDriveBrowseFilesResponse], error,
) {
	return GenericInvokePlugin[requests.RequestOnlineDriveBrowseFiles, datasource_entities.GetOnlineDriveBrowseFilesResponse](
		session,
		request,
		1,
	)
}

func DatasourceOnlineDriveDownloadFile(
	session *session_manager.Session,
	request *requests.RequestOnlineDriveDownloadFile,
) (
	*stream.Stream[datasource_entities.DataSourceResponseChunk], error,
) {
	return GenericInvokePlugin[requests.RequestOnlineDriveDownloadFile, datasource_entities.DataSourceResponseChunk](
		session,
		request,
		1,
	)
}
