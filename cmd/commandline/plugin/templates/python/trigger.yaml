identity:
  name: "{{ .PluginName }}_event"
  author: "{{ .Author }}"
  label:
    en_US: "{{ .PluginName | SnakeToCamel }} Event"
    zh_Hans: "{{ .PluginName }} 事件"
    pt_BR: "Evento {{ .PluginName | SnakeToCamel }}"
    ja_JP: "{{ .PluginName }} イベント"

description:
  en_US: "{{ .PluginDescription }}"
  zh_Hans: "{{ .PluginDescription }}"
  pt_BR: "{{ .PluginDescription }}"
  ja_JP: "{{ .PluginDescription }}"

parameters:
  - name: "sample_filter"
    type: "string"
    required: false
    label:
      en_US: "Sample Filter"
      zh_Hans: "示例过滤器"
      pt_BR: "Filtro de Exemplo"
      ja_JP: "サンプルフィルター"
    help:
      en_US: "Optionally filter events before executing the trigger."
      zh_Hans: "在执行触发器之前可选地过滤事件。"
      pt_BR: "Opcionalmente filtre eventos antes de executar o gatilho."
      ja_JP: "トリガーを実行する前にイベントをフィルタリングします (任意)。"

output_schema:
  type: object
  properties:
    message:
      type: string
      description: "Sample message returned to downstream workflow nodes."
    raw_event:
      type: object
      description: "Original payload returned by the third-party integration."

extra:
  python:
    source: events/{{ .PluginName }}_event.py
